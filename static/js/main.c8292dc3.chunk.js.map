{"version":3,"sources":["Components/GoodInfo/GoodInfo.tsx","Components/GoodList/GoodList.tsx","api/Goods.tsx","App.tsx","index.tsx"],"names":["GoodInfo","good","GoodList","goods","className","map","goodsFromServer","SORT_FIELD_LENGTH","SORT_FIELD_ALPHABET","App","useState","sortField","setSortField","reverse","setReverse","visibleGoods","prepearedGoods","sort","good1","good2","localeCompare","length","sortGoods","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"uPAMaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oBAAI,UAAQ,OAAZ,SAAoBA,KCCTC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,oBAAIC,UAAU,WAAd,SACGD,EAAME,KAAI,SAAAJ,GAAI,OAAI,cAAC,EAAD,CAAqBA,KAAMA,GAAZA,SCVzBK,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UCEIC,EAAoB,SACpBC,EAAsB,WA8BrB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAhCR,SACEZ,EADF,GAGW,IADPQ,EACM,EADNA,UAAWE,EACL,EADKA,QAEPG,EAAc,YAAOb,GAqB3B,OAnBIQ,GACFK,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQR,GACN,KAAKH,EACH,OAAOU,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXR,GACFG,EAAeH,UAGVG,EAOcM,CAAUhB,EAAiB,CAAEK,YAAWE,YAE7D,OACE,sBAAKT,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEmB,KAAK,SACLnB,UAAWoB,IAAG,SAAU,UACtB,CAAE,WAAYb,IAAcH,IAC9BiB,QAAS,kBAAMb,EAAaJ,IAJ9B,iCASA,wBACEe,KAAK,SACLnB,UAAWoB,IAAG,SAAU,aACtB,CAAE,WAAYb,IAAcJ,IAC9BkB,QAAS,kBAAMb,EAAaL,IAJ9B,4BASA,wBACEgB,KAAK,SACLnB,UAAWoB,IAAG,SAAU,aACtB,CAAE,YAAaX,IACjBY,QAAS,kBAAMX,GAAYD,IAJ7B,sBASEA,GAAWF,IACX,wBACEY,KAAK,SACLnB,UAAU,4BACVqB,QAAS,WACPb,EAAa,IACbE,GAAW,IALf,sBAaJ,cAAC,EAAD,CAAUX,MAAOY,QC1FvBW,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c8292dc3.chunk.js","sourcesContent":["import { Good } from '../../types/Good';\n\ntype Props = {\n  good: Good;\n};\n\nexport const GoodInfo: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">{good}</li>\n);\n","import React from 'react';\nimport { GoodInfo } from '../GoodInfo/GoodInfo';\nimport { Good } from '../../types/Good';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"GoodList\">\n    {goods.map(good => <GoodInfo key={good} good={good} />)}\n  </ul>\n);\n","export const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nimport { GoodList } from './Components/GoodList/GoodList';\nimport { goodsFromServer } from './api/Goods';\n\nimport { Good } from './types/Good';\nimport { SortParams } from './types/SortParams';\n\nconst SORT_FIELD_LENGTH = 'LENGTH';\nconst SORT_FIELD_ALPHABET = 'ALPHABET';\n\nfunction sortGoods(\n  goods: Good[],\n  { sortField, reverse }: SortParams,\n): Good[] {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = sortGoods(goodsFromServer, { sortField, reverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SORT_FIELD_ALPHABET })}\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !reverse })}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(reverse || sortField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={visibleGoods} />\n    </div>\n\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}